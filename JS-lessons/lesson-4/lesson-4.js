// 1. Объяви переменные и присвой им значения разных типов. Используй оператор typeof, чтобы вывести в консоль типы этих переменных;

const text = "Text";
console.log(typeof text);

const number = 100;
console.log(typeof number);

const isTrue = true;
console.log(typeof isTrue);

// 2. Изучи разницу между хранением данных по ссылке и по значению более детально. Напиши своими словами, как ты это понял. 
// Приведи примеры, которые показывают эту разницу. В этом могут помочь дополнительные ресурсы.

let a = 10; // Примитивный тип данных

let b = "Text"; // Тоже примитивных тип данных

let c = [1,2]; // Сложный тип данных

const primer = { // Тоже сложный тип данных
    animal: "Cat",
    breed: "turkish angora"
};

// Примитивные типы данных хранятся в переменной как есть, а сложные (массивы, объекты и функции) хранятся в памяти в виде ссылки. 
// Если вызвать переменную с, то мы получаем не возвращаемое значение (как в случае с примитивными типами данных), а значение из памяти по этому адрессу. 
// То есть, переменная хранит просто ссылку на значение в памяти. 

let d = c; // Переменные d и c ссылаются на один и тот же массив, который был создан ранее. Или иначе, D ссылвется на тот же фрагмент памяти в коде, что и c.

// Это нужно понимать, так как если переменная c будет изменена, то переменная d тоже будет изменена. И наоборот. 

d.push(3) // Теперь переменная с = [1,2,3], как и переменная d = [1,2,3]. Изменив переменную d, мы также изменим переменную с.

// Допустим, для приложения нам нужно хранить массив с данными и произвести какие-то действия с ним. К примеру, нам необходимо изменить его
// для новой отдельной логики, но при этом оригинальный массив не должен измениться. Для этого есть разные методы копирования.
// Данные с вложенными структурами следует копировать рекурсивно или методом глубального копирования.