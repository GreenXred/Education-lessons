// 1. Напиши функцию, которая создает локальную переменную и выводит её значение. 
// Попробуй получить доступ к этой переменной вне функции и объясни, что произошло;

const myFunction = () => {
    const value = 10;
    console.log(value);
}

myFunction();

console.log(value); // is not defined 

// Переменная value объявлена в функциональной области видимости. При попытке вызвать переменную вне функции, она не будет найдена.

// 2. Создай блок с условием и объяви переменную внутри него. Попробуй получить доступ к этой переменной вне блока и объясни результат;

if (true) {
    const blockVariable = "I'm inside a block";
    console.log(blockVariable); 
}

console.log(blockVariable); // blockVariable is not defined

// Переменная blockVariable объявлена в блочной области видимости. При попытке вызвать переменную вне функции, она не будет найдена.

// 3. Изучи, что такое hoisting в JavaScript и расскажи своими словами, что это такое и какие проблемы с ним связаны. Приведи примеры :)

// Hoisting - JavaScript "поднимает" объявления переменных и функций наверх кода в глобальную область видимости.

// 3.1. Объявления переменных в функции.

sayHi(); // успешно вызывается

function sayHi() {
  console.log("Hi!");
}

sayHi(); // успешно вызывается

// 3.2. В случае с let и const будет ошибка. Они тоже поднимаются, но их к ним нельзя обращаться до инициализации

console.log(b); // Ошибка: Cannot access 'b' before initialization
let b = 10; // мертвая зона

// 3.3. А с var совсем иначе. Объявление поднимается, но не присвоенное значение (будет undefined).

console.log(a); // undefined
var a = 5;

// это можно представить так: 

var a;        // hoisting
console.log(a); // undefined
a = 5;



// 4*. Творческое задание - попробуй изобразить свое понимание областей видимости, нарисовать иллюстрацию к этой теме.

// * - напоминаю, что задания со звездочкой - не обязательные, вы выполняете их по желанию :)

// Прикрепил картинкой.

[ Глобальная область ]
 └── [ Функция sayHi ]
       └── [ if {...} блок ]
